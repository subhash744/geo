-- Create profiles table
CREATE TABLE profiles (
  id UUID REFERENCES auth.users NOT NULL PRIMARY KEY,
  username TEXT UNIQUE,
  display_name TEXT,
  quote TEXT,
  bio TEXT,
  avatar TEXT,
  social_x TEXT,
  social_github TEXT,
  social_website TEXT,
  social_linkedin TEXT,
  views INTEGER DEFAULT 0,
  upvotes INTEGER DEFAULT 0,
  rank INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  streak INTEGER DEFAULT 0,
  last_active_date TIMESTAMP WITH TIME ZONE,
  last_seen_date TEXT,
  schema_version INTEGER,
  lat DOUBLE PRECISION,
  lng DOUBLE PRECISION,
  city TEXT,
  country TEXT,
  map_clicks INTEGER DEFAULT 0,
  xp INTEGER DEFAULT 0,
  level INTEGER DEFAULT 1,
  referral_code TEXT,
  referral_count INTEGER DEFAULT 0,
  hide_location BOOLEAN DEFAULT false,
  theme_preference TEXT,
  followers_count INTEGER DEFAULT 0,
  following_count INTEGER DEFAULT 0,
  projects_count INTEGER DEFAULT 0,
  links_count INTEGER DEFAULT 0,
  achievements_count INTEGER DEFAULT 0,
  badges_count INTEGER DEFAULT 0,
  early_adopter BOOLEAN DEFAULT false,
  hall_of_famer BOOLEAN DEFAULT false,
  creative_unlocked BOOLEAN DEFAULT false,
  connected_unlocked BOOLEAN DEFAULT false,
  streak_freezes INTEGER DEFAULT 0
);

-- Create profile_links table
CREATE TABLE profile_links (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  profile_id UUID REFERENCES profiles NOT NULL,
  title TEXT,
  url TEXT,
  order_index INTEGER
);

-- Create projects table
CREATE TABLE projects (
  id TEXT PRIMARY KEY,
  profile_id UUID REFERENCES profiles NOT NULL,
  title TEXT,
  description TEXT,
  banner_url TEXT,
  link TEXT,
  upvotes INTEGER DEFAULT 0,
  views INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create profile_badges table
CREATE TABLE profile_badges (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  profile_id UUID REFERENCES profiles NOT NULL,
  name TEXT,
  awarded_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  order_index INTEGER
);

-- Set up Row Level Security (RLS)
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE profile_links ENABLE ROW LEVEL SECURITY;
ALTER TABLE projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE profile_badges ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Public profiles are viewable by everyone" ON profiles
  FOR SELECT USING (true);

CREATE POLICY "Users can insert their own profile" ON profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update their own profile" ON profiles
  FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Public profile links are viewable by everyone" ON profile_links
  FOR SELECT USING (true);

CREATE POLICY "Users can insert their own profile links" ON profile_links
  FOR INSERT WITH CHECK (auth.uid() = profile_id);

CREATE POLICY "Users can update their own profile links" ON profile_links
  FOR UPDATE USING (auth.uid() = profile_id);

CREATE POLICY "Public projects are viewable by everyone" ON projects
  FOR SELECT USING (true);

CREATE POLICY "Users can insert their own projects" ON projects
  FOR INSERT WITH CHECK (auth.uid() = profile_id);

CREATE POLICY "Users can update their own projects" ON projects
  FOR UPDATE USING (auth.uid() = profile_id);

CREATE POLICY "Public badges are viewable by everyone" ON profile_badges
  FOR SELECT USING (true);

CREATE POLICY "Users can insert their own badges" ON profile_badges
  FOR INSERT WITH CHECK (auth.uid() = profile_id);

CREATE POLICY "Users can update their own badges" ON profile_badges
  FOR UPDATE USING (auth.uid() = profile_id);