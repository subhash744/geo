-- Complete Supabase schema for pure cloud-based Brillance Leaderboard application
-- This script creates all tables needed to store the entire application data in Supabase
-- with no reliance on localStorage for persistence

-- Create profiles table
CREATE TABLE profiles (
  id UUID REFERENCES auth.users NOT NULL PRIMARY KEY,
  username TEXT UNIQUE,
  display_name TEXT,
  quote TEXT,
  bio TEXT,
  avatar TEXT,
  social_x TEXT,
  social_github TEXT,
  social_website TEXT,
  social_linkedin TEXT,
  views INTEGER DEFAULT 0,
  upvotes INTEGER DEFAULT 0,
  rank INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  streak INTEGER DEFAULT 0,
  last_active_date TIMESTAMP WITH TIME ZONE,
  last_seen_date TEXT,
  schema_version INTEGER,
  lat DOUBLE PRECISION,
  lng DOUBLE PRECISION,
  city TEXT,
  country TEXT,
  map_clicks INTEGER DEFAULT 0,
  xp INTEGER DEFAULT 0,
  level INTEGER DEFAULT 1,
  referral_code TEXT,
  referral_count INTEGER DEFAULT 0,
  hide_location BOOLEAN DEFAULT false,
  theme_preference TEXT,
  followers_count INTEGER DEFAULT 0,
  following_count INTEGER DEFAULT 0,
  projects_count INTEGER DEFAULT 0,
  links_count INTEGER DEFAULT 0,
  achievements_count INTEGER DEFAULT 0,
  badges_count INTEGER DEFAULT 0,
  early_adopter BOOLEAN DEFAULT false,
  hall_of_famer BOOLEAN DEFAULT false,
  creative_unlocked BOOLEAN DEFAULT false,
  connected_unlocked BOOLEAN DEFAULT false,
  streak_freezes INTEGER DEFAULT 0,
  featured_count INTEGER DEFAULT 0,
  first_upvote_received BOOLEAN DEFAULT false,
  link_master_unlocked BOOLEAN DEFAULT false,
  quick_rise_unlocked BOOLEAN DEFAULT false,
  hot_streak_unlocked BOOLEAN DEFAULT false
);

-- Create profile_links table
CREATE TABLE profile_links (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  profile_id UUID REFERENCES profiles NOT NULL,
  title TEXT,
  url TEXT,
  order_index INTEGER
);

-- Create projects table
CREATE TABLE projects (
  id TEXT PRIMARY KEY,
  profile_id UUID REFERENCES profiles NOT NULL,
  title TEXT,
  description TEXT,
  banner_url TEXT,
  link TEXT,
  upvotes INTEGER DEFAULT 0,
  views INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create profile_badges table
CREATE TABLE profile_badges (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  profile_id UUID REFERENCES profiles NOT NULL,
  name TEXT,
  awarded_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  order_index INTEGER
);

-- Create leaderboard_entries table
CREATE TABLE leaderboard_entries (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES profiles NOT NULL,
  username TEXT,
  display_name TEXT,
  avatar TEXT,
  rank INTEGER,
  score NUMERIC,
  views INTEGER,
  upvotes INTEGER,
  streak INTEGER,
  project_count INTEGER,
  badges JSONB,
  sort_by TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create upvotes table
CREATE TABLE upvotes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES profiles NOT NULL,
  voter_id TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create daily_stats table
CREATE TABLE daily_stats (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES profiles NOT NULL,
  date TEXT,
  views INTEGER DEFAULT 0,
  upvotes INTEGER DEFAULT 0,
  xp INTEGER DEFAULT 0
);

-- Create hall_of_fame table
CREATE TABLE hall_of_fame (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES profiles NOT NULL,
  featured_count INTEGER DEFAULT 0,
  hall_of_famer BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create daily_challenges table
CREATE TABLE daily_challenges (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES profiles NOT NULL,
  date TEXT,
  completed BOOLEAN DEFAULT false,
  prompt TEXT,
  reward INTEGER
);

-- Create user_followers table
CREATE TABLE user_followers (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES profiles NOT NULL,
  follower_id UUID REFERENCES profiles NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create user_following table
CREATE TABLE user_following (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES profiles NOT NULL,
  following_id UUID REFERENCES profiles NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create daily_views table
CREATE TABLE daily_views (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES profiles NOT NULL,
  date TEXT,
  count INTEGER DEFAULT 0
);

-- Create daily_upvotes table
CREATE TABLE daily_upvotes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES profiles NOT NULL,
  date TEXT,
  count INTEGER DEFAULT 0
);

-- Create user_achievements table
CREATE TABLE user_achievements (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES profiles NOT NULL,
  achievement_id TEXT,
  unlocked_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create user_daily_stats table
CREATE TABLE user_daily_stats (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES profiles NOT NULL,
  date TEXT,
  xp INTEGER DEFAULT 0
);

-- Set up Row Level Security (RLS)
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE profile_links ENABLE ROW LEVEL SECURITY;
ALTER TABLE projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE profile_badges ENABLE ROW LEVEL SECURITY;
ALTER TABLE leaderboard_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE upvotes ENABLE ROW LEVEL SECURITY;
ALTER TABLE daily_stats ENABLE ROW LEVEL SECURITY;
ALTER TABLE hall_of_fame ENABLE ROW LEVEL SECURITY;
ALTER TABLE daily_challenges ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_followers ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_following ENABLE ROW LEVEL SECURITY;
ALTER TABLE daily_views ENABLE ROW LEVEL SECURITY;
ALTER TABLE daily_upvotes ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_achievements ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_daily_stats ENABLE ROW LEVEL SECURITY;

-- Create policies for profiles
CREATE POLICY "Public profiles are viewable by everyone" ON profiles
  FOR SELECT USING (true);

CREATE POLICY "Users can insert their own profile" ON profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update their own profile" ON profiles
  FOR UPDATE USING (auth.uid() = id);

-- Create policies for profile_links
CREATE POLICY "Public profile links are viewable by everyone" ON profile_links
  FOR SELECT USING (true);

CREATE POLICY "Users can insert their own profile links" ON profile_links
  FOR INSERT WITH CHECK (auth.uid() = profile_id);

CREATE POLICY "Users can update their own profile links" ON profile_links
  FOR UPDATE USING (auth.uid() = profile_id);

-- Create policies for projects
CREATE POLICY "Public projects are viewable by everyone" ON projects
  FOR SELECT USING (true);

CREATE POLICY "Users can insert their own projects" ON projects
  FOR INSERT WITH CHECK (auth.uid() = profile_id);

CREATE POLICY "Users can update their own projects" ON projects
  FOR UPDATE USING (auth.uid() = profile_id);

-- Create policies for profile_badges
CREATE POLICY "Public badges are viewable by everyone" ON profile_badges
  FOR SELECT USING (true);

CREATE POLICY "Users can insert their own badges" ON profile_badges
  FOR INSERT WITH CHECK (auth.uid() = profile_id);

CREATE POLICY "Users can update their own badges" ON profile_badges
  FOR UPDATE USING (auth.uid() = profile_id);

-- Create policies for leaderboard_entries
CREATE POLICY "Public leaderboard entries are viewable by everyone" ON leaderboard_entries
  FOR SELECT USING (true);

CREATE POLICY "Users can insert their own leaderboard entries" ON leaderboard_entries
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own leaderboard entries" ON leaderboard_entries
  FOR UPDATE USING (auth.uid() = user_id);

-- Create policies for upvotes
CREATE POLICY "Upvotes are viewable by everyone" ON upvotes
  FOR SELECT USING (true);

CREATE POLICY "Users can insert upvotes" ON upvotes
  FOR INSERT WITH CHECK (true);

-- Create policies for daily_stats
CREATE POLICY "Daily stats are viewable by everyone" ON daily_stats
  FOR SELECT USING (true);

CREATE POLICY "Users can insert their own daily stats" ON daily_stats
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own daily stats" ON daily_stats
  FOR UPDATE USING (auth.uid() = user_id);

-- Create policies for hall_of_fame
CREATE POLICY "Hall of fame entries are viewable by everyone" ON hall_of_fame
  FOR SELECT USING (true);

CREATE POLICY "Users can insert their own hall of fame entries" ON hall_of_fame
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own hall of fame entries" ON hall_of_fame
  FOR UPDATE USING (auth.uid() = user_id);

-- Create policies for daily_challenges
CREATE POLICY "Users can view their own daily challenges" ON daily_challenges
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own daily challenges" ON daily_challenges
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own daily challenges" ON daily_challenges
  FOR UPDATE USING (auth.uid() = user_id);

-- Create policies for user_followers
CREATE POLICY "Users can view their followers" ON user_followers
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can add followers" ON user_followers
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Create policies for user_following
CREATE POLICY "Users can view who they are following" ON user_following
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can add following" ON user_following
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Create policies for daily_views
CREATE POLICY "Users can view their daily views" ON daily_views
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their daily views" ON daily_views
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Create policies for daily_upvotes
CREATE POLICY "Users can view their daily upvotes" ON daily_upvotes
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their daily upvotes" ON daily_upvotes
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Create policies for user_achievements
CREATE POLICY "Users can view their achievements" ON user_achievements
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their achievements" ON user_achievements
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Create policies for user_daily_stats
CREATE POLICY "Users can view their daily stats" ON user_daily_stats
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their daily stats" ON user_daily_stats
  FOR INSERT WITH CHECK (auth.uid() = user_id);